var noLangErr = new Error("Erreur code 3 : Lang est manquant, veuillez vous reporter à la documentation Cocote");
var langTypeErr = new Error("Erreur code 4 : Lang doit être une chaîne de caractères, veuillez vous reporter à la documentation Cocote");
var _paq = _paq || [];

_paq.push(["trackPageView"]);
_paq.push(["enableLinkTracking"]);

// Used in all seller pages and when Cocote user viewing product from Cocote on seller website
function CocoteTSA(optA) {
    var cocoteTestAnalytics = getParameterByName("cocotetestanalytics");
    var cocoteCashbackToken = getParameterByName("cocotecashbacktoken");
    var noMatomoSiteIdErr = new Error("Erreur code 1 : Site id est manquant, veuillez vous reporter à la documentation Cocote");
    var matomoSiteIdTypeErr = new Error("Erreur code 2 : Site id doit être un nombre entier, veuillez vous reporter à la documentation Cocote");
    var noLangErr = new Error("Error code 3 : Lang is missing, report to Cocote documentation");
    var langTypeErr = new Error("Error code 4 : Lang must be a string, report to Cocote documentation");

    if (optA.lang) {
        if (typeof optA.lang !== "string") {
            return console.error(langTypeErr);
        }

        lang = optA.lang;
    } else {
        return console.error(noLangErr);
    }

    if (optA.mSiteId) {
        optA.mSiteId = Number(optA.mSiteId);

        if (!Number.isInteger(optA.mSiteId)) {
            return console.error(matomoSiteIdTypeErr);
        }
        siteId = optA.mSiteId;
    } else {
        return console.error(noMatomoSiteIdErr);
    }

    if (cocoteTestAnalytics || cocoteCashbackToken) {
        var expireDate = new Date();

        expireDate = addDays(expireDate, 7);
        document.cookie = "cocote_analytics=true" + "; expires=" + expireDate + "; path=/";
    }

    if (getCookie("cocote_analytics")) {
        enableMatomo(optA.lang, optA.mSiteId);
    }
}

function getParameterByName(name, url) {
    if (!url) {
        url = window.location.href;
    }

    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
    var results = regex.exec(url);

    if (!results) {
        return null;
    }
    if (!results[2]) {
        return "";
    }

    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

function addDays(date, days) {
    var result = new Date(date);

    result.setDate(result.getDate() + days);

    return result;
}

function enableMatomo(lang, siteId) {
    var u="//" + lang + "-matomo.cocote.com/";
    _paq.push(["setTrackerUrl", u+"piwik.php"]);
    _paq.push(["setSiteId", siteId]);

    var d=document, g=d.createElement("script"), s=d.getElementsByTagName("script")[0]; g.type="text/javascript";
    g.defer=true; g.async=true; g.src=u+"piwik.js"; s.parentNode.insertBefore(g,s);
}

function getCookie(cname) {
    var name = cname + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var ca = decodedCookie.split(";");

    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];

        while (c.charAt(0) == " ") {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }

    return "";
}